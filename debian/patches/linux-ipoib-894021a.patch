Description: Make the carrier_on_task race aware
 From linux 894021a:
 .
 We blindly assume that we can just take the rtnl lock and that will
 prevent races with downing this interface.  Unfortunately, that's not
 the case.  In ipoib_mcast_stop_thread() we will call flush_workqueue()
 in an attempt to clear out all remaining instances of ipoib_join_task.
 But, since this task is put on the same workqueue as the join task,
 the flush_workqueue waits on this thread too.  But this thread is
 deadlocked on the rtnl lock.  The better thing here is to use trylock
 and loop on that until we either get the lock or we see that
 FLAG_OPER_UP has been cleared, in which case we don't need to do
 anything anyway and we just return.
 .
 While investigating which flag should be used, FLAG_ADMIN_UP or
 FLAG_OPER_UP, it was determined that FLAG_OPER_UP was the more
 appropriate flag to use.  However, there was a mix of these two flags in
 use in the existing code.  So while we check for that flag here as part
 of this race fix, also cleanup the two places that had used the less
 appropriate flag for their tests.
Author: Brian T. Smith <bsmith@systemfabricworks.com>
Author: Doug Ledford <dledford@redhat.com>
Origin: https://github.com/torvalds/linux/commit/894021a752912ef4c2b63c8d2c466c00bc3cd2e6#diff-354653dff7ec9ddd6ac73f85f2956316
Forwarded: not-needed
Last-Update: <2017-12-14>
---
This patch header follows DEP-3: http://dep.debian.net/deps/dep3/
--- a/ib_ipoib/ipoib_multicast.c
+++ b/ib_ipoib/ipoib_multicast.c
@@ -353,18 +353,27 @@
 						   carrier_on_task);
 	struct ib_port_attr attr;
 
-	/*
-	 * Take rtnl_lock to avoid racing with ipoib_stop() and
-	 * turning the carrier back on while a device is being
-	 * removed.
-	 */
 	if (ib_query_port(priv->ca, priv->port, &attr) ||
 	    attr.state != IB_PORT_ACTIVE) {
 		ipoib_dbg(priv, "Keeping carrier off until IB port is active\n");
 		return;
 	}
 
-	rtnl_lock();
+	/*
+	 * Take rtnl_lock to avoid racing with ipoib_stop() and
+	 * turning the carrier back on while a device is being
+	 * removed.  However, ipoib_stop() will attempt to flush
+	 * the workqueue while holding the rtnl lock, so loop
+	 * on trylock until either we get the lock or we see
+	 * FLAG_OPER_UP go away as that signals that we are bailing
+	 * and can safely ignore the carrier on work.
+	 */
+	while (!rtnl_trylock()) {
+		if (!test_bit(IPOIB_FLAG_OPER_UP, &priv->flags))
+			return;
+		else
+			msleep(20);
+	}
 	if (!ipoib_cm_admin_enabled(priv->dev))
 		dev_set_mtu(priv->dev, min(priv->mcast_mtu, priv->admin_mtu));
 	netif_carrier_on(priv->dev);
@@ -538,7 +547,7 @@
 	if (!priv->broadcast) {
 		struct ipoib_mcast *broadcast;
 
-		if (!test_bit(IPOIB_FLAG_ADMIN_UP, &priv->flags))
+		if (!test_bit(IPOIB_FLAG_OPER_UP, &priv->flags))
 			return;
 
 		broadcast = ipoib_mcast_alloc(dev, 1);
@@ -888,7 +897,7 @@
 		ipoib_mcast_free(mcast);
 	}
 
-	if (test_bit(IPOIB_FLAG_ADMIN_UP, &priv->flags))
+	if (test_bit(IPOIB_FLAG_OPER_UP, &priv->flags))
 		ipoib_mcast_start_thread(dev);
 }
 
