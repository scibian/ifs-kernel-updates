Description:  Consolidate rtnl_lock tasks in workqueue
 From linux c84ca6d:
 .
 The ipoib_mcast_flush_dev routine is called with the rtnl_lock held and
 needs to keep it held.  It also needs to call flush_workqueue() to flush
 out any outstanding work.  In the past, we've had to try and make sure
 that we didn't flush out any outstanding join completions because they
 also wanted to grab rtnl_lock() and that would deadlock.  It turns out
 that the only thing in the join completion handler that needs this lock
 can be safely moved to our carrier_on_task, thereby reducing the
 potential for the join completion code and the flush code to deadlock
 against each other.
Author: Brian T. Smith <bsmith@systemfabricworks.com>
Author: Doug Ledford <dledford@redhat.com>
Origin: https://github.com/torvalds/linux/commit/c84ca6d2b1a1bfbdab2dd2bc243840e9589a5aaf#diff-354653dff7ec9ddd6ac73f85f2956316
Forwarded: not-needed
Last-Update: <2017-012-14>
---
This patch header follows DEP-3: http://dep.debian.net/deps/dep3/
--- a/ib_ipoib/ipoib_multicast.c
+++ b/ib_ipoib/ipoib_multicast.c
@@ -190,12 +190,6 @@
 		spin_unlock_irq(&priv->lock);
 		priv->tx_wr.wr.ud.remote_qkey = priv->qkey;
 		set_qkey = 1;
-
-		if (!ipoib_cm_admin_enabled(dev)) {
-			rtnl_lock();
-			dev_set_mtu(dev, min(priv->mcast_mtu, priv->admin_mtu));
-			rtnl_unlock();
-		}
 	}
 
 	if (!test_bit(IPOIB_MCAST_FLAG_SENDONLY, &mcast->flags)) {
@@ -371,6 +365,8 @@
 	}
 
 	rtnl_lock();
+	if (!ipoib_cm_admin_enabled(priv->dev))
+		dev_set_mtu(priv->dev, min(priv->mcast_mtu, priv->admin_mtu));
 	netif_carrier_on(priv->dev);
 	rtnl_unlock();
 }
